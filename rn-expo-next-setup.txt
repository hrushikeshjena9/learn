To create a **universal app** (same codebase for both **web and mobile**) using **Next.js** and **React Native**, you’ll need to use a setup that integrates both environments into a single codebase. The idea is to share code between your **React Native mobile app** and **Next.js web app**.

Here's a guide to help you get started with **Next.js + React Native** for building a **universal app**:

---

### **1. Setting Up the Project**
You’ll be working with **React Native for mobile** and **Next.js for the web**. You can achieve this by organizing your project to share code between both platforms.

#### **Install dependencies:**

1. **Create the root project directory:**

   ```bash
   mkdir universal-app
   cd universal-app
   ```

2. **Initialize the React Native project** (You can use Expo or React Native CLI).

   For **Expo**:
   ```bash
   expo init mobile
   ```

   For **React Native CLI**:
   ```bash
   npx react-native init mobile
   ```

3. **Create a Next.js app:**
   In the same root folder, create a new **Next.js** project:

   ```bash
   npx create-next-app web
   ```

   Now you have two separate directories:
   - `mobile/` (React Native app)
   - `web/` (Next.js app)

4. **Set up code sharing:**
   You can now create a shared directory between `mobile` and `web` that contains shared components and logic.

   ```bash
   mkdir shared
   ```

   This will hold shared components, utilities, and logic that can be used by both the **mobile** and **web** apps.

---

### **2. Code Structure**
You should structure the code in a way that allows you to import shared components across both apps.

#### Example folder structure:
```plaintext
universal-app/
│
├── mobile/                  # React Native code
│   ├── App.js               # Main entry point
│   └── assets/              # Mobile-specific assets
│
├── web/                     # Next.js code
│   ├── pages/               # Next.js pages
│   ├── components/          # Web-specific components
│   └── styles/              # Global styles for the web
│
├── shared/                  # Shared components, hooks, logic
│   ├── components/          # Shared UI components
│   ├── hooks/               # Shared React hooks
│   └── utils/               # Shared utility functions
│
├── package.json
└── README.md
```

- **`shared/`**: Contains the shared code that can be used by both React Native and Next.js apps.
- **`mobile/`**: Your React Native project for mobile platforms.
- **`web/`**: Your Next.js project for web browsers.

---

### **3. Shared Components**
Create components inside the `shared/` directory that can be used by both React Native and Next.js apps. You’ll use **React Native Web** to make React Native components compatible with the web.

#### **Install React Native Web**:
React Native Web allows you to use React Native components in a web environment. Install the required packages in the root project directory.

```bash
npm install react-native-web react-dom react-scripts
```

#### **Example of a shared component:**

Create a shared button component in `shared/components/Button.js`.

```jsx
// shared/components/Button.js
import React from 'react';
import { Button as RNButton } from 'react-native'; // React Native Button
import { Button as WebButton } from 'react-bootstrap'; // Web Button from React-Bootstrap

const Button = ({ title, onPress, platform }) => {
  if (platform === 'web') {
    return <WebButton onClick={onPress}>{title}</WebButton>;  // Web Button
  }
  return <RNButton title={title} onPress={onPress} />;       // Mobile Button
};

export default Button;
```

This component will render a **React Native Button** for mobile devices and a **Web Button** for the web.

---

### **4. Setting Up React Native Web for Universal App**
You need to configure **React Native Web** in the **Next.js** project so it can render React Native components in the browser.

#### **Configure Webpack for React Native Web:**
Next.js allows customization of the Webpack configuration. Modify the `next.config.js` file in your `web/` directory to set up React Native Web.

Create or update `next.config.js` in the `web` folder:

```javascript
// web/next.config.js
module.exports = {
  webpack: (config) => {
    // Alias react-native to react-native-web
    config.resolve.alias = {
      ...config.resolve.alias,
      'react-native$': 'react-native-web',
    };
    return config;
  },
};
```

This tells Webpack to resolve **`react-native`** to **`react-native-web`** when building the web app.

---

### **5. Platform-Specific Code**
Sometimes you need to write platform-specific code, as some features may behave differently on mobile vs web. You can use the `Platform` module from **React Native** to conditionally render platform-specific components.

#### Example:

```jsx
// shared/components/Header.js
import React from 'react';
import { Platform, Text } from 'react-native';  // Import from React Native

const Header = () => {
  if (Platform.OS === 'web') {
    return <Text style={{ fontSize: 24 }}>Web Header</Text>; // Web Header
  }
  return <Text style={{ fontSize: 24 }}>Mobile Header</Text>; // Mobile Header
};

export default Header;
```

In this case, the `Header` component will render differently based on whether it is running on the **web** or **mobile** platform.

---

### **6. Running the Universal App**

#### **Run React Native on Mobile:**
Go to the `mobile/` directory and start the React Native project.

For Expo:
```bash
cd mobile
expo start
```

For React Native CLI:
```bash
cd mobile
npx react-native run-android    # For Android
npx react-native run-ios        # For iOS
```

#### **Run Next.js on the Web:**
Go to the `web/` directory and run the Next.js project.

```bash
cd web
npm run dev
```

Visit `http://localhost:3000` to see your web app in action.

---

### **7. Advantages of Using Next.js + React Native**

- **Code Sharing**: You can share logic, components, and utilities between web and mobile.
- **Server-Side Rendering**: Next.js provides server-side rendering (SSR) for your web app, improving SEO and performance.
- **Optimized Performance**: Both React Native and Next.js have optimizations built in, improving the performance of your app on both platforms.
- **Faster Development**: Sharing code between platforms reduces development time and ensures consistency across web and mobile.
- **SEO-Friendly**: Next.js handles SEO and allows you to have a faster and more optimized web app.

---

### **Conclusion**
By using **Next.js** for the web and **React Native** for mobile, combined with **React Native Web** for compatibility, you can build a **universal app** that shares a codebase for both platforms. This approach allows you to leverage the strengths of each framework, giving you a powerful and flexible solution for modern app development.

Let me know if you need more details on any step, or help with specific configurations!